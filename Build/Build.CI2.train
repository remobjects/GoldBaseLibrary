include("$(Train)/ci2.train");

var elementsInTools = expand("$(CIToolsBaseFolder)/Tools/Elements");

//var elementsVersionIni = ini.fromFile("$(elementsInTools)/VersionInfo.ini");
//var elementsVersion = elementsVersionIni.getValue("Options", "VERSION");
var elementsVersion = getVersionNumberFromGlobalIni("Elements");
export("CIVersionNumber", elementsVersion);

var optionNoParallel = !ciOptions.contains("PARALLEL");
var optionRebuild = ciOptions.contains("REBUILD");
var optionClearCache = ciOptions.contains("CLEARCACHE") || optionRebuild;
var useLatestCompiler = true;

if (useLatestCompiler)
{
	var elementsShared = path.resolve("./elements-shared");
	folder.create(elementsShared);
	var elementsBin = expand("$(elementsShared)/ZipDistro");

	var sharedElementsS3 = findClosestSharedS3FolderWithBranch("elements", "develop");
	extractZipFromS3(getSharedS3Bucket(), sharedElementsS3, "FullZipDistro.zip", elementsBin);
	file.copy("$(elementsBin)/References/Echoes/NET", elementsBin);
	var ebuildExe = expand('$(elementsBin)/EBuild.exe');
	var eBuildReferenceFolderOverrides = '"--setting:ToffeeSDKFolder=$(elementsBin)/Toffee SDKs" "--setting:IslandSDKFolder=$(elementsBin)/Island SDKs" "--setting:AdditionalReferencePaths=$(elementsBin)/References"';
}
else
{
	var ebuildExe = expand('$(elementsInTools)/EBuild.exe');
	var eBuildReferenceFolderOverrides = '"--setting:ToffeeSDKFolder=$(elementsInTools)/Toffee SDKs" "--setting:IslandSDKFolder=$(elementsInTools)/Island SDKs" "--setting:AdditionalReferencePaths=$(elementsInTools)/References"';
}
var ebuildIntermediatebasefolder = expand("c:\\ci\\EBuild-cache\\GBL\\$(CIBranch)");
var eBuildStandardParams = expand("--setting:Device=True --setting:Simulator=True --setting:Mac=True --setting:SimulatorArchitecture=Legacy --debug --intermediatebasefolder:$(ebuildIntermediatebasefolder)");

if (optionClearCache)
{
	folder.remove(ebuildIntermediatebasefolder);
}

//
// Methods
//

function runEBuild(project, out, params)
{
	var commandline = expand('--debug --no-copy-local $(eBuildReferenceFolderOverrides) $(eBuildStandardParams) "--out:$(out)" $(params)');
	if (optionRebuild)
		commandline = commandline+" --nocache";
	if (!optionNoParallel)
		commandline = commandline+" --parallel";
	log(commandline);
	ebuild.runCustomEBuild(path.resolve(ebuildExe), project, commandline);	
}

function compileGoBaseLibrary()
{
	msbuild.updateAssemblyVersion("../Source/Gold/Properties/AssemblyInfo.pas", elementsVersion);
	runEBuild("../Source/GoBaseLibrary.sln", "../Bin", "--output-folder-uses-mode-name --output-folder-uses-sdk-name --setting:Architecture=Legacy --setting:GenerateDebugInfo=False");
	file.remove("../Bin/Echoes/NET/GoldAspect.*"); // we don't need the Aspect
	file.move("../Bin/Cooper/Plain/*.*", "../Bin/Cooper/"); // flatten
}

compileGoBaseLibrary();

zipName = expand("$(CIReleaseFolder)/GoBaseLibrary.zip");
zip.compress(zipName, "../Bin", "*.*", true);

zipIslandMac = expand("$(CIReleaseFolder)/Island-macOS-Go.zip");
zip.compress(zipIslandMac, "../Bin/Island", "macOS/*.*", true);

var temp_ios = "../Bin/temp_ios";
folder.create(temp_ios);
file.copy(path.combine("../Bin/Island/iOS/", "*.*"), path.combine(temp_ios, "iOS"), true);
file.copy(path.combine("../Bin/Island/iOS Simulator/", "*.*"), path.combine(temp_ios, "iOS Simulator"), true);
file.copy(path.combine("../Bin/Island/Mac Catalyst/", "*.*"), path.combine(temp_ios, "Mac Catalyst"), true);
zipIslandiOS = expand("$(CIReleaseFolder)/Island-iOS-Go.zip");
zip.compress(zipIslandiOS, temp_ios, "*.*", true);
folder.remove(temp_ios);
//zip.compress(zipIslandiOS, "../Bin", "iOS/*/Go.*;iOS\ Simulator/*/Go.*;Mac\ Catalyst/*/Go.*", true);

var temp_tvos = "../Bin/temp_tvos";
folder.create(temp_tvos);
file.copy(path.combine("../Bin/Island/tvOS/", "*.*"), path.combine(temp_tvos, "tvOS"), true);
file.copy(path.combine("../Bin/Island/tvOS Simulator/", "*.*"), path.combine(temp_tvos, "tvOS Simulator"), true);
zipIslandtvOS = expand("$(CIReleaseFolder)/Island-tvOS-Go.zip");
zip.compress(zipIslandtvOS, temp_tvos, "*.*", true);
folder.remove(temp_tvos);
//zip.compress(zipIslandtvOS, "../Bin", "tvOS/*/Go.*;tvOS\ Simulator/*/Go.*", true);

var temp_watchos = "../Bin/temp_watchos";
folder.create(temp_watchos);
file.copy(path.combine("../Bin/Island/watchOS/", "*.*"), path.combine(temp_watchos, "watchOS"), true);
file.copy(path.combine("../Bin/Island/watchOS Simulator/", "*.*"), path.combine(temp_watchos, "watchOS Simulator"), true);
zipIslandwatchOS = expand("$(CIReleaseFolder)/Island-watchOS-Go.zip");
zip.compress(zipIslandwatchOS, temp_watchos, "*.*", true);
folder.remove(temp_watchos);
//zip.compress(zipIslandwatchOS, "../Bin", "watchOS/*/Go.*;watchOS\ Simulator/*/Go.*", true);

zipIslandAndroid = expand("$(CIReleaseFolder)/Island-Android-Go.zip");
zip.compress(zipIslandAndroid, "../Bin/Island", "Android/*.*", true);

zipIslandUbuntu = expand("$(CIReleaseFolder)/Island-Ubuntu-Go.zip");
zip.compress(zipIslandUbuntu, "../Bin/Island", "Ubuntu/*.*", true);

zipIslandWindows = expand("$(CIReleaseFolder)/Island-Windows-Go.zip");
zip.compress(zipIslandWindows, "../Bin/Island", "Windows/*.*", true);

zipEchoes = expand("$(CIReleaseFolder)/Echoes-Go.zip");
zip.compress(zipEchoes, "../Bin/Echoes", "*.*", true);

zipCooper = expand("$(CIReleaseFolder)/Cooper-Go.zip");
zip.compress(zipCooper, "../Bin/Cooper", "*.*", true);


var s3 = getSharedS3Bucket();
s3.uploadFile(zipName, ciSharedPrefix);

s3.uploadFile(zipIslandMac, ciSharedPrefix);
s3.uploadFile(zipIslandiOS, ciSharedPrefix);
s3.uploadFile(zipIslandtvOS, ciSharedPrefix);
s3.uploadFile(zipIslandwatchOS, ciSharedPrefix);
s3.uploadFile(zipIslandAndroid, ciSharedPrefix);
s3.uploadFile(zipIslandUbuntu, ciSharedPrefix);
s3.uploadFile(zipIslandWindows, ciSharedPrefix);
